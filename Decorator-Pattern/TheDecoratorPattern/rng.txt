Numbers Stream API
Let us assume that we have some object which generates some data.
We don’t know exactly what and how much data is the generator going to 
create (potentially it may be indefinitely many). However, we want to 
have a way to perform certain operations on those data as the come. 
For the sake of simplicity, let’s assume that our "generator of
unknown data" only generates random real numbers (of type double). The
task is to implement operations which can be applied to this stream of random
numbers. 

Project consists of:
1. Definition of an interface IRandomNumberGenerator which contains:
• double Generate() - generates a random number
• void Reset() - resets the generator (it will emit the same sequence from the beginning)
2. An implementation of this interface: class RNG. For the simplicity of
reading the generated numbers are rounded to second decimal place.
3. Main method which instantiates IRandomNumberGenerator object (along
with another instance which is going to be used later) and prints few
generated numbers.
Assumptions:
1. Generator may generate numbers indefinitely and our memory is definite so it’s impossible to store all the numbers.
2. The RNG class is "done" and we respect the Open/Close Principle (Open
for extensions, closed for modifications) and don’t modify it directly.
3. In order to see a result, the generator is initialized with a seed so the
generated sequence is always the same.
4. Since the generated stream is indefinite, all filter operations (tasks 9-
10) will never yield empty sequence - sooner or later a number which
passes the filter will be generated
Your task:
D1. Implement an operation which adds a given number to each generated number. We want to have the ability to pass this number as an
argument, so it can’t be a constant. Call this operation in Main.
D2. Add an operation similar to the one from point 2 but with multiplication instead of addition. Call this operation in Main as well.
D3. Add a possibility to round down the generated number.
D4. Add a possibility to round up the generated number.
Once the code which does it is done, use it in the Main function to see the results.
D5. Add a possibility to "merge" two generators (use the declared "another" generator). 
"Merge" should create a stream which takes numbers from the input streams, and return greater number.
D6. Implement a similar functionality as in point 5 but it returns from both alternately.
7. Create new "raw" generators. Apply a sequence of operations such
that the resulting sequence consists of numbers generated by the first
generator shifted by 2 (add 2 to each element), multiplied by three
and shifted by -2 (subtract 2) then merged (by maximum - point 5.) with the second generator
multiplied by 3 and shifter by 5. After the merge, round down the resulting
sequence elements and then create yet another "raw" generator whose
results should be rounded up and merged with your generator (alternately - point 6.).
8. Add a clamping filter which is initialized by minimum and maximum value.
This filter passes values between min and max, in others
cases returns minimum or maximum value respectively.
9. Add a filter which only accepts numbers which are greater than or
equal to previous number (i.e. the resulting sequence should be non-decreasing)
10. Add a filter similar to the one in point 9. but with non-growing sequence
11. Add an operation which negates every second generated number.
